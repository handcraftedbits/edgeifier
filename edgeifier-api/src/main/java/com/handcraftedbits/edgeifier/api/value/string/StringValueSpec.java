/**
 * Copyright (C) 2018 HandcraftedBits
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.handcraftedbits.edgeifier.api.value.string;

import com.handcraftedbits.edgeifier.api.value.ValueBuilder;

/**
 * A specification for generating {@link String} values.
 */

public interface StringValueSpec {
     /**
      * Specifies that any of the provided Unicode code point values may be generated.
      *
      * @param values an array of integer containing the Unicode code points that may be generated.
      * @return a {@link StringValueSpecAdjustments} object used to further refine this specification.
      * @throws IllegalArgumentException if the array of values is null or empty.
      */

     StringValueSpecAdjustments anyInAlphabet (int... values);

     /**
      * Specifies that any Unicode code point in the specified range may be generated.
      *
      * @param begin an integer containing the beginning of the range.
      * @param end an integer containing the end of the range.
      * @return a {@link StringValueSpecAdjustments} object used to further refine this specification.
      * @throws IllegalArgumentException if the end value is less than the beginning value.
      */

     StringValueSpecAdjustments anyInRange (int begin, int end);

     /**
      * Specifies that any of the provided String values may be generated.
      *
      * @param values a {@link String} array containing the values that may be generated.
      * @return a {@link StringValueSpecAdjustments} object used to further refine this specification.
      * @throws IllegalArgumentException if the array of values is null, empty, or if any of the values are null.
      */

     StringValueSpecAdjustments anyOf (String... values);

     /**
      * Specifies that the values generated by a {@link ValueBuilder} instance are to be converted to a String and in
      * turn generated by the {@link ValueBuilder} defined by this specification. This is useful for, e.g., including
      * numbers in generated String values.
      *
      * @param builder the {@link ValueBuilder} instance to use.
      * @return a {@link StringValueSpecAdjustments} object used to further refine this specification.
      * @throws IllegalArgumentException if the {@link ValueBuilder} instance is null.
      */

     StringValueSpecAdjustments builder (ValueBuilder<?> builder);

     /**
      * Specifies that a specific String value must be generated.
      *
      * @param value a {@link String} containing the value to generate.
      * @return a {@link StringValueSpecAdjustments} object used to further refine this specification.
      * @throws IllegalArgumentException if the value is null.
      */

     StringValueSpecAdjustments thisOne (String value);
}
